/* © Clarify Cloud Limited 2013, 2014
All Rights Reserved
No part of this material or any of its contents may be reproduced, copied, modified or adapted, without prior written consent from Clarify Cloud Limited.
*/
document.addEventListener("deviceready",onDeviceReadyBLE,false);var index=0;var intervalCheck=null;var IntervalCheckDataTimer=10000;var batlowlevel=20;$("#findBlueBelt").on("click",function(){blueLE.isOFF=true;blueLE.isInUse=true;setButtonsOff();if(!intervalCheck){intervalCheck=setInterval(IntervalCheckData,IntervalCheckDataTimer)}$("#disconnectBluetooth").removeClass("ui-disabled");resetMessages();$("#messageTitle").text("Trying to connect");blueLE.startConnection()});$("#connectBluetooth").on("click",function(){setButtonsOff();if(!intervalCheck){IntervalCheckData();intervalCheck=setInterval(IntervalCheckData,IntervalCheckDataTimer)}$("#disconnectBluetooth").removeClass("ui-disabled");blueLE.isOFF=true;blueLE.isInUse=true;if(blueLE.isConn){blueLE.unsubscribeDevice();setTimeout(function(){resetDevice()},2000)}else{resetDevice()}});$("#disconnectBluetooth").on("click",function(){blueLE.isOFF=false;blueLE.isInUse=false;setButtonsOn();$("#disconnectBluetooth").addClass("ui-disabled");if(blueLE.isDisc===true){blueLE.unsubscribeDevice()}else{blueLE.disconnectDevice()}setTimeout(function(){clearInterval(intervalCheck);intervalCheck=null;resetMessages();resetDisplay();$("#indicatorble").hide()},2000)});$("#closepopupbelt").on("click",function(){$("#beltfound").popup("close")});function resetDevice(){if(!blueLE.isInit){blueLE.startConnection()}else{if(blueLE.deviceAdd!==null){blueLE.connectDevice(blueLE.deviceAdd)}else{blueLE.startConnection()}}}function setButtonsOn(){$("#connectBluetooth").removeClass("ui-disabled");$("#findBlueBelt").removeClass("ui-disabled")}function setButtonsOff(){$("#connectBluetooth").addClass("ui-disabled");$("#findBlueBelt").addClass("ui-disabled")}function phoneAndroidVer(){if(window.device.platform==blueLE.androidPlatform){var a=parseFloat(getAndroidVersion());if(a<4.3){$("#blutoothstatus").text(" Android version :  "+a+" does not Support Bluetooth Low Energy Devices");setButtonsOff()}}}function resetMessages(){$("#messageStatus").text("");$("#messageError").text("");$("#messageReturn").text("");$("#messageReturn2").text("");$("#messageReturn3").text("");blueLE.messageRData("N/c")}function resetDisplay(){$("#messageTitle").text("");$("#messageReturn").text("");$("#messageReturn2").text("");$("#messageReturn3").text("");blueLE.messageRData("N/c")}function onDeviceReadyBLE(){$("#indicatorble").hide();$("#disconnectBluetooth").addClass("ui-disabled");if(window.device.platform==blueLE.wp8Platform){$("#connectBluetooth").addClass("ui-disabled");$("#findBlueBelt").addClass("ui-disabled")}else{phoneAndroidVer();$("#disconnectBluetooth").addClass("ui-disabled");document.addEventListener("pause",onPauseBLE,false);$("#messageTitle").text("Bluetooth Ready")}resetMessages();resetDisplay();blueLE.isScan=false;blueLE.isConn=false;blueLE.isDisc=false;blueLE.isOFF=false}function getAndroidVersion(b){b=b||navigator.userAgent;var a=b.match(/Android\s([0-9\.]*)/i);return a?a[1]:false}function IntervalCheckData(){$("#regBluetooth").page();blueLE.checkStatus();if(!blueLE.isInit){resetMessages();resetDisplay();$("#messageTitle").text("Bluetooth OFF")}else{if(blueLE.isConn&&!blueLE.isDisc){resetMessages();$("#messageTitle").text("Disconnecting");blueLE.disconnectDevice()}else{if(!blueLE.isConn&&!blueLE.isDisc){resetMessages();blueLE.startConnection();$("#messageTitle").text("Bluetooth Ready")}else{if(blueLE.isConn&&blueLE.isDisc){setButtonsOff();$("#disconnectBluetooth").removeClass("ui-disabled");$("#messageTitle").text("Bluetooth Ready")}else{$("#messageTitle").text("Bluetooth Ready")}}}}}function onPauseBLE(){if(window.device.platform!=blueLE.wp8Platform){clearInterval(intervalCheck);intervalCheck=null;blueLE.unsubscribeDevice();document.addEventListener("resume",onResumeBLE,false)}}function onResumeBLE(){if(window.device.platform!=blueLE.wp8Platform){if(!intervalCheck){if(blueLE.isInUse==true){resetMessages();resetDevice();$("#messageTitle").text("Reset in Progress ...");IntervalCheckData();intervalCheck=setInterval(IntervalCheckData,IntervalCheckDataTimer)}else{resetMessages();resetDisplay()}}}}function onUnLoad(){if(window.device){if(window.device.platform!=blueLE.wp8Platform){clearInterval(intervalCheck);intervalCheck=null;blueLE.disconnectDevice()}}}var blueLE={addressKey:"address",deviceAdd:"ADD",isConn:false,isInit:false,isScan:false,isDisc:false,isOFF:false,isInUse:false,heartRateServiceUuid:"180d",heartRateMeasurementCharacteristicUuid:"2a37",clientCharacteristicConfigDescriptorUuid:"2902",batteryServiceUuid:"180f",batteryLevelCharacteristicUuid:"2a19",scanTimer:null,connectTimer:null,reconnectTimer:null,iOSPlatform:"iOS",androidPlatform:"Android",wp8Platform:"Win32NT",messageSuccess:function(a){$("#messageStatus").text(a)},messageError:function(a){$("#messageError").text(a)},messageReport:function(a){$("#messageReturn2").text("HR  : "+a)},messagepopup:function(b,a){$("#beltfound").popup("close");$("#beltmsg").text(b);$("#beltfound").popup("open");setTimeout(function(){$("#beltfound").popup("close")},a)},batteryLevelMessage:function(a){$("#messageReturn").text("Battery "+a);if(a<batlowlevel){blueLE.messagepopup("Heart Rate Belt Battery Low  :"+a+"%",2000)}},alertBatLow:function(){},messageRData:function(a){rData.setHeartRate(a)},checkInit:function(){bluetoothle.isInitialized(blueLE.isInitializedCall)},checkConnection:function(){bluetoothle.isConnected(blueLE.isConnectedCall)},checkDiscovered:function(){bluetoothle.isDiscovered(blueLE.isDiscoveredCall)},checkScanning:function(){bluetoothle.isScanning(blueLE.isScanningCall)},checkStatus:function(){blueLE.checkInit();blueLE.checkConnection();blueLE.checkDiscovered();blueLE.checkScanning()},isInitializedCall:function(a){if(window.device.platform==blueLE.iOSPlatform){blueLE.isInit=a}else{blueLE.isInit=a.isInitalized}if(blueLE.isInit===true){$("#indicator1").removeClass("indRed").addClass("indGreen")}else{$("#indicator1").removeClass("indGreen").addClass("indRed")}},isScanningCall:function(a){if(blueLE.isScan===true){$("#indicator2").removeClass("indYellow").addClass("indGreen")}else{$("#indicator2").removeClass("indGreen").addClass("indYellow")}},isConnectedCall:function(a){if(window.device.platform==blueLE.iOSPlatform){blueLE.isConn=a}else{blueLE.isConn=a.isConnected}if(blueLE.isConn===true){$("#indicator3").removeClass("indRed").addClass("indGreen")}else{$("#indicator3").removeClass("indGreen").addClass("indRed")}},isDiscoveredCall:function(a){if(window.device.platform==blueLE.iOSPlatform){}else{}if(blueLE.isDisc===true){$("#indicator4").removeClass("indRed").addClass("indGreen")}else{$("#indicator4").removeClass("indGreen").addClass("indRed")}},checkBLE:function(){alert("Pressed in BLE")},startConnection:function(){blueLE.checkStatus();blueLE.messageSuccess("Search for Belt");if(blueLE.isScan){blueLE.messageSuccess("Scan in Progress")}else{if(blueLE.isDisc){blueLE.unsubscribeDevice()}else{if(blueLE.isConn){blueLE.disconnectDevice()}}setTimeout(function(){blueLE.deviceAdd=null;bluetoothle.initialize(blueLE.initializeSuccess,blueLE.initializeError)},1000)}},connectDevice:function(a){blueLE.messageSuccess("Connect to :"+a);var b={address:a};bluetoothle.connect(blueLE.connectSuccess,blueLE.connectError,b);blueLE.connectTimer=setTimeout(blueLE.connectTimeout,10000)},reconnect:function(){blueLE.messageSuccess("Reconnection in 5 sec");bluetoothle.reconnect(blueLE.reconnectSuccess,blueLE.reconnectError);blueLE.reconnectTimer=setTimeout(blueLE.reconnectTimeout,8000)},disconnectDevice:function(){blueLE.checkConnection();if(blueLE.isConn){bluetoothle.disconnect(blueLE.disconnectSuccess,blueLE.disconnectError)}else{blueLE.messageSuccess("Not Connected");blueLE.closeDevice()}},closeDevice:function(){bluetoothle.close(blueLE.closeSuccess,blueLE.closeError)},unsubscribeDevice:function(){blueLE.messageSuccess("Disconnecting HR Service");var a={serviceUuid:blueLE.heartRateServiceUuid,characteristicUuid:blueLE.heartRateMeasurementCharacteristicUuid};bluetoothle.unsubscribe(blueLE.unsubscribeSuccess,blueLE.unsubscribeError,a)},readBatteryLevel:function(){blueLE.messageSuccess("Reading Battery Level");var a={serviceUuid:blueLE.batteryServiceUuid,characteristicUuid:blueLE.batteryLevelCharacteristicUuid};bluetoothle.read(blueLE.readSuccess,blueLE.readError,a)},initializeSuccess:function(b){$("#blutoothstatus").text("");$("#indicatorble").show();blueLE.isInit=true;if(!blueLE.isScan){var a={serviceUuids:[blueLE.heartRateServiceUuid]};bluetoothle.startScan(blueLE.startScanSuccess,blueLE.startScanError,a)}},startScanSuccess:function(a){blueLE.isScan=true;if(a.status=="scanResult"){blueLE.deviceAdd=a.address;setTimeout(function(){blueLE.connectDevice(blueLE.deviceAdd);bluetoothle.stopScan(blueLE.stopScanSuccess,blueLE.stopScanError);blueLE.clearScanTimeout()},500);blueLE.messageSuccess("Scan Found :"+a.name+" - "+a.address)}else{if(a.status=="scanStarted"){blueLE.scanTimer=setTimeout(blueLE.scanTimeout,10000)}else{blueLE.isScan=false;blueLE.messageSuccess("Error: "+a.status)}}},stopScanSuccess:function(a){blueLE.isScan=false;if(a.status=="scanStopped"){}else{}},connectSuccess:function(b){$("#indicatorble").show();if(b.status=="connected"){$("#messageTitle").text(b.name+" - "+b.address);blueLE.clearConnectTimeout();if(window.device.platform==blueLE.iOSPlatform){blueLE.messageSuccess("HR Service");var a={serviceUuids:[blueLE.heartRateServiceUuid]};bluetoothle.services(blueLE.servicesHeartSuccess,blueLE.servicesHeartError,a)}else{if(window.device.platform==blueLE.androidPlatform){blueLE.messageSuccess("Collecting Data");bluetoothle.discover(blueLE.discoverSuccess,blueLE.discoverError)}}}else{if(b.status=="connecting"){blueLE.messageSuccess("Connecting to "+b.name+" - "+b.address)}else{blueLE.isDisc=false;blueLE.messageSuccess("Connection Problem : "+b.status);blueLE.clearConnectTimeout()}}},reconnectSuccess:function(b){$("#indicatorble").show();if(b.status=="connected"){blueLE.messageSuccess("Reconnected to "+b.name);blueLE.clearReconnectTimeout();if(window.device.platform==blueLE.iOSPlatform){blueLE.messageSuccess("HR Service");var a={serviceUuids:[blueLE.heartRateServiceUuid]};bluetoothle.services(blueLE.servicesHeartSuccess,blueLE.servicesHeartError,a)}else{if(window.device.platform==blueLE.androidPlatform){blueLE.messageSuccess("Gathering Data");bluetoothle.discover(blueLE.discoverSuccess,blueLE.discoverError)}}}else{if(b.status=="connecting"){blueLE.messageSuccess("Reconnecting to "+b.name)}else{blueLE.messageSuccess("Error : "+b.status);blueLE.disconnectDevice()}}},servicesHeartSuccess:function(e){if(e.status=="discoveredServices"){blueLE.isDisc=true;var b=e.serviceUuids;for(var a=0;a<b.length;a++){var c=b[a];if(c==blueLE.heartRateServiceUuid){var d={serviceUuid:blueLE.heartRateServiceUuid,characteristicUuids:[blueLE.heartRateMeasurementCharacteristicUuid]};bluetoothle.characteristics(blueLE.characteristicsHeartSuccess,blueLE.characteristicsHeartError,d);return}}}else{}blueLE.disconnectDevice()},characteristicsHeartSuccess:function(d){if(d.status=="discoveredCharacteristics"){blueLE.isDisc=true;var b=d.characteristicUuids;for(var a=0;a<b.length;a++){blueLE.messageSuccess("HR Service Started");var e=b[a];if(e==blueLE.heartRateMeasurementCharacteristicUuid){var c={serviceUuid:blueLE.heartRateServiceUuid,characteristicUuid:blueLE.heartRateMeasurementCharacteristicUuid};bluetoothle.descriptors(blueLE.descriptorsHeartSuccess,blueLE.descriptorsHeartError,c);return}}blueLE.messageSuccess("Error: ");blueLE.isDisc=false}else{blueLE.messageSuccess("Error : "+d.status);blueLE.isDisc=false}blueLE.disconnectDevice()},descriptorsHeartSuccess:function(b){if(b.status=="discoveredDescriptors"){blueLE.messageSuccess("Checking Battery ");var a={serviceUuids:[blueLE.batteryServiceUuid]};bluetoothle.services(blueLE.servicesBatterySuccess,blueLE.servicesBatteryError,a)}else{blueLE.messageSuccess("Error : "+b.status);blueLE.disconnectDevice()}},servicesBatterySuccess:function(e){if(e.status=="discoveredServices"){var b=e.serviceUuids;for(var a=0;a<b.length;a++){var c=b[a];if(c==blueLE.batteryServiceUuid){blueLE.messageSuccess("Checking Battery Level ");var d={serviceUuid:blueLE.batteryServiceUuid,characteristicUuids:[blueLE.batteryLevelCharacteristicUuid]};bluetoothle.characteristics(blueLE.characteristicsBatterySuccess,blueLE.characteristicsBatteryError,d);return}}blueLE.messageSuccess("Cant Check Battery: ")}else{blueLE.messageSuccess("Error : "+e.status)}blueLE.disconnectDevice()},characteristicsBatterySuccess:function(c){if(c.status=="discoveredCharacteristics"){var b=c.characteristicUuids;for(var a=0;a<b.length;a++){var b=b[a];if(b==blueLE.batteryLevelCharacteristicUuid){blueLE.readBatteryLevel();return}}blueLE.messageSuccess("Error : ")}else{blueLE.messageSuccess("Problem Checking Battery: "+c.status)}blueLE.disconnectDevice()},discoverSuccess:function(a){if(a.status=="discovered"){blueLE.messageSuccess("Retriving Data");blueLE.readBatteryLevel();blueLE.isDisc=true}else{blueLE.messageSuccess("Problem with Data : "+a.status);blueLE.isDisc=false;blueLE.disconnectDevice()}},readSuccess:function(e){if(e.status=="read"){var c=bluetoothle.encodedStringToBytes(e.value);var a=c[0];if(a){blueLE.batteryLevelMessage(a)}blueLE.messageSuccess("Data in 5 Sec ");var d={serviceUuid:blueLE.heartRateServiceUuid,characteristicUuid:blueLE.heartRateMeasurementCharacteristicUuid};bluetoothle.subscribe(blueLE.subscribeSuccess,blueLE.subscribeError,d)}else{blueLE.messageSuccess(" Error : "+e.status);blueLE.disconnectDevice()}},subscribeSuccess:function(h){if(h.status=="subscribedResult"){blueLE.messageSuccess("Data ");blueLE.isDisc=true;var c=bluetoothle.encodedStringToBytes(h.value);if(c.length===0){blueLE.messageSuccess("Result zero length");return}var b=c[0];var f;if((b&1)==1){var g=c.buffer.slice(1,3);var e=new Uint16Array(g)[0];f=e}else{var d=c.buffer.slice(1,2);var a=new Uint8Array(d)[0];f=a}blueLE.messageReport(f);blueLE.messageRData(f)}else{if(h.status=="subscribed"){blueLE.messageSuccess("Gathering Data ")}else{blueLE.messageSuccess("Error : "+h.status);blueLE.isDisc=false;blueLE.disconnectDevice()}}},unsubscribeSuccess:function(b){blueLE.isDisc=false;if(b.status=="unsubscribed"){blueLE.messageSuccess("Disconnecting Belt ");var a={serviceUuid:blueLE.heartRateServiceUuid,characteristicUuid:blueLE.heartRateMeasurementCharacteristicUuid,descriptorAssignedNumber:blueLE.clientCharacteristicConfigDescriptorUuid};bluetoothle.readDescriptor(blueLE.readDescriptorSuccess,blueLE.readDescriptorError,a)}else{blueLE.messageSuccess("Problem Disconnecting : "+b.status);blueLE.disconnectDevice()}},readDescriptorSuccess:function(c){if(c.status=="readDescriptor"){var a=bluetoothle.stringToBytes(c.value);var b=new Uint16Array(a.buffer);blueLE.disconnectDevice()}else{blueLE.messageSuccess("Error : "+c.status);blueLE.disconnectDevice()}},disconnectSuccess:function(a){blueLE.isDisc=false;if(a.status=="disconnected"){blueLE.messageSuccess("Belt Disconnected");blueLE.closeDevice()}else{if(a.status=="disconnecting"){blueLE.messageSuccess("Disconnecting Belt")}else{blueLE.messageSuccess("Error : "+a.status)}}},closeSuccess:function(a){blueLE.isInit=false;if(a.status=="closed"){blueLE.messageSuccess("Belt Disconnected");blueLE.isInit=false;blueLE.messageRData("N/c");$("#indicatorble").hide()}else{blueLE.messageSuccess("Unexpected Problem : "+a.status)}},initializeError:function(a){blueLE.isInit=false;blueLE.messageSuccess("Problem Connecting :"+a.message);blueLE.messagepopup("Heart Rate Belt Problem Connecting",2000)},startScanError:function(a){blueLE.isScan=false;blueLE.messageSuccess("Searching for Belt"+a.message)},stopScanError:function(a){blueLE.isScan=true;blueLE.messageSuccess("Scan Stoped : "+a.error+" - "+a.message)},connectError:function(a){blueLE.unsubscribeDevice();blueLE.messageSuccess("Error Trying Again: "+a.error+" - "+a.message);blueLE.clearConnectTimeout()},reconnectError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},servicesHeartError:function(a){blueLE.isDisc=false;blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},characteristicsHeartError:function(a){blueLE.isDisc=false;blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},descriptorsHeartError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},servicesBatteryError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},characteristicsBatteryError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},discoverError:function(a){blueLE.isDisc=false;blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},readError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},readDescriptorError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},subscribeError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},unsubscribeError:function(a){blueLE.messageSuccess("Error : "+a.message);blueLE.disconnectDevice()},disconnectError:function(a){blueLE.messageSuccess("Error : "+a.error+" - "+a.message)},closeError:function(a){},scanTimeout:function(){blueLE.messageSuccess("Scan Stopped");if(!blueLE.isConn){blueLE.messagepopup("Scanning to Find Belt if this continues please ensure you have the correct Belt Type Bluetooth 4.0 and Check Battery in Belt",5000)}bluetoothle.stopScan(blueLE.stopScanSuccess,blueLE.stopScanError)},clearScanTimeout:function(){if(blueLE.scanTimer!==null){clearTimeout(blueLE.scanTimer);blueLE.scanTimer=null}},connectTimeout:function(){blueLE.messageSuccess("Connection Timed Out")},clearConnectTimeout:function(){blueLE.messageSuccess("Reattempt Search");if(blueLE.connectTimer!==null){clearTimeout(blueLE.connectTimer);blueLE.connectTimer=null}},tempDisconnectDevice:function(){blueLE.messageSuccess("Disconnecting :");bluetoothle.disconnect(blueLE.tempDisconnectSuccess,blueLE.tempDisconnectError)},tempDisconnectSuccess:function(a){if(a.status=="disconnected"){blueLE.messageSuccess("Reconnecting in ...");setTimeout(blueLE.reconnect,2000)}else{if(a.status=="disconnecting"){blueLE.messageSuccess("Disconnecting from Belt")}else{blueLE.messageSuccess("Error ")}}},tempDisconnectError:function(a){blueLE.messageSuccess("Error : "+a.message)},reconnectTimeout:function(){blueLE.messageSuccess("Reconnection Timed out")},clearReconnectTimeout:function(){blueLE.messageSuccess("Restart ");if(blueLE.reconnectTimer!==null){clearTimeout(blueLE.reconnectTimer);blueLE.reconnectTimer=null}}};